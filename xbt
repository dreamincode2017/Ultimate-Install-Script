#!/bin/bash

# XBT -- External Backup Tool (v. 2.0) -- by Joe Collins. (www.ezeelinux.com)
# ...Special Thanks to Jeremy O'Connell and Jody James. (December 13th, 2017)
# (GNU/General Public License version 2.0)
#
# A Script to create a snapshot backup of /etc and /home on a dedicated
# external USB drive.
#
# ...And away we go!

# Declare static variables:

user=$USER

host=$HOSTNAME

# Set functions:

backup() {

# XBT backup. Runs full backup of /etc and /home directories on host machine.

# Checking for valid media:

if [ ! -d /media/$user/XBT_Drive ]; then

    clear
    echo $'\n'$"XBT Backup"
    echo "XBT Error: NO XBT DRIVE FOUND! Please make sure XBT_Drive USB is connected."
	echo "If you just set up the XBT Drive, remove it and plug it back in."
    greeting

fi

# Checking for sudo permissions:

sudo ls > /dev/null

# Making sure user has ownership of the XBT Drive:

sudo chown $user /media/${user}/XBT_Drive/

# Log file is created in /tmp:

date_and_time="$(date)"
echo $'\n'$"Backup sent to XBT_Drive USB from $host by user '$user' on" \
> /tmp/backup.log
echo "$date_and_time. Any errors?" >> /tmp/backup.log

# Begin backup operations using rsync:

# Creating machine specific directories:

mkdir -p /media/$user/XBT_Drive/XBT_Backups/$host

# Starting synchronization:

clear
echo $'\n'$"XBT Backup"
echo $'\n'$"Backing up /etc..."
sudo rsync -aH --delete --info=progress2 /etc/ \
/media/$user/XBT_Drive/XBT_Backups/$host/Etc_Backup/ 2>> /tmp/backup.log
echo $'\n'$"Backing up /home..."
sudo rsync -aH --delete --info=progress2 /home/ \
/media/$user/XBT_Drive/XBT_Backups/$host/Home_Backup/ 2>> /tmp/backup.log

# Checking status of rsync exit code:

if [ "$?" == "0" ]; then

    # Clear any accidental input during backup:

    read -t 1 -n 10000 discard

    # Get the time:

    time="$(date +"%T")"
    echo "No errors! :)" >> /tmp/backup.log
    clear
    echo "XBT Backup: Successfully completed at $time!" | tee -a /tmp/backup.log

    # Log file is created or appended on XBT_Drive from /tmp:
    # (backup.log will be removed from /tmp on next reboot.)

    cat /tmp/backup.log >> /media/$user/XBT_Drive/XBT_Backups/xbt-backup.log

else

    # Alert user there were some errors and return to Main Menu:

    # Clear any accidental input during backup:

    read -t 1 -n 10000 discard

    # Get the time:

    time="$(date +"%T")"
    clear
    echo "XBT Backup: Exited with errors at $time!" \
    | tee -a /tmp/backup.log
    echo "Please review XBT Log to see them."
    cat /tmp/backup.log >> /media/$user/XBT_Drive/XBT_Backups/xbt-backup.log
    echo "Wait! Syncing drives..."
    sync
    echo "...Done."
    greeting

fi

# Writing all cached data to drives and returning to Main Menu:

echo $'\n'$"Wait! Syncing drives..."
sync
echo "..Done."
echo "It's now safe to remove XBT_Drive."
greeting

}

restore() {

# XBT Restore. Runs an rsync operation to restore host's /home directory.

# Checking for valid media:

if [ ! -d /media/$user/XBT_Drive ]; then

    clear
	echo $'\n'$"XBT Restore"
    echo "XBT Error: NO XBT DRIVE FOUND! Please make sure XBT_Drive USB is connected."
    greeting

fi

# Checking for sudo permissions

sudo ls > /dev/null

# Starting restore function and offering user a chance to exit:

clear
echo $'\n'$"XBT Restore"

# CHeck for valid media and the host's backup directory:

if [ ! -d /media/$user/XBT_Drive/XBT_Backups/$host/ ]; then

    echo "XBT Error: Cannot find valid backup directory for $host!"
    echo "Drive may not have been used to backup this machine or the"
    echo "XBT_Backups/$host directory may have been moved or deleted."
    greeting

fi

echo $'\n'$"WARNING!"$
echo $'\n'$"Any new files created in /home since last backup WILL BE DELETED!"
echo "Are you sure you want to restore now? [y/N]"
read -n 1 -s choice

    if test "$choice" == "y"; then

        # Giving user a chance to close other apps and starting rsync.

        echo "Close any running applications and press any key to continue."
        read -n 1 -s
        echo $'\n'$"Restoring /home... Please DO NOT open any applications."
        sudo rsync -aH --delete --info=progress2 \
        /media/$user/XBT_Drive/XBT_Backups/$host/Home_Backup/ \
        /home/

            # Checking status of rsync exit code:

            if [ "$?" == "0" ]; then

                # Prompt user to restart machine and exit:

                # Clear any accidental input during restore:

                read -t 1 -n 10000 discard

                echo $'\n'$"Restoration complete!"
                echo "Wait! Syncing drives..."
                sync
                echo "...Done."
                echo "It's now safe to remove XBT_Drive."
                echo "Restart machine for all changes to take effect."
                echo $'\n'$"Press any key to exit XBT."
                read -n 1 -s
                clear
                echo "Exiting XBT ..Goodbye!"
                sleep 2
                exit

            else

                # Returning to Main Menu if rsync fails:

                # Clear any accidental input during restore:

                read -t 1 -n 10000 discard

                clear
                echo $'\n'$"XBT Restore"
                echo "XBT Error: rsync exited with errors!"
                echo "DO NOT EXIT XBT UNTIL YOU:"
                echo $'\n'$"    Make sure XBT Drive USB is still plugged in."
                echo "    Remount XBT Drive USB by unplugging it and plugging it back in."
                echo $'\n'$"Wait a few seconds and try running XBT Restore again."
                echo "You may need to manually restore your data if errors persist."
                greeting

            fi

    else

        clear
        echo "XBT restoration canceled."
        greeting

    fi

clear
greeting

}

setup_drive() {

# XBT Drive Setup: This function will format and label an USB drive for XBT.


# Checking for any USB drive:

if [[ ! $(lsblk -S -o  TRAN | grep 'usb') = *usb* ]]; then

    # Show error and exit to Main Menu:

    clear
    echo $'\n'$"XBT Drive Setup"
    echo "XBT Error: No valid USB drives to setup! Please plug one in."
    greeting

fi

# Show user warnings:

clear
cat << _EOF_

XBT Drive Setup

 You must create an XBT Drive before you can use XBT.

 You can use any USB storage device for your XBT Drive. It should have enough
 storage capacity to hold all of the data in the /home directories of all the
 machines you'd like to make backups from. XBT Drive Setup will format and
 label a drive for use with XBT. You can use this drive to store other data
 after you run the fist XBT backup. Running the XBT backup will set the
 permissions so that you will own the drive and then new files and directories
 can be created outside of the /XBT_Backups directory.

  *************************************************************************
  * WARNING: XBT Drive Setup will clear ALL DATA on the USB drive chosen! *
  *************************************************************************

 Double check you have the drive you want to use plugged in before continuing!

_EOF_

# Giving the user a chance to opt out:

echo "Would you like to setup your XBT Drive now? [y/N]"
read -n 1 -s choice

if test "$choice" == "y"; then

    # Checking for sudo permissions:

    sudo ls >> /dev/null

    # Getting list of drives:

    lsblk -p -S -o  NAME,TRAN,SIZE | grep usb > /tmp/xbt-usb-list.tmp

    # Letting user select the disk:

    echo "Type the number for the USB Drive you'd like to use and press Enter."
    echo "You can also just press Enter if there is only one USB drive listed."
    num=1
        while read p; do
      	echo $num "-" $p
    	num=$(($num + 1))
    done </tmp/xbt-usb-list.tmp

    # Reading user's choice:

    read line

    # Assigning choice to a variable and fixing the format of the answer:

    chosen_disk=` sed -n "$line p" /tmp/xbt-usb-list.tmp | awk '{print $1}' `

    sudo rm /tmp/xbt-usb-list.tmp

    # Checking if user's choice variable is empty before continuing:

    if  [ -z "$chosen_disk" ]; then

        echo "XBT Error: No valid USB drive chosen. Try again."
        sleep 3
        setup_drive

    fi

    clear

    # Last Chance! Asking user if they want to format the chosen disk:

    echo $'\n'$"Are you sure you to use $chosen_disk for XBT Drive??"
    echo "WARNING!! This will delete ALL DATA already on the drive!"
    echo $'\n'$"Type in 'YES' in all caps and press Enter to continue."
    echo "Press Enter to abort and return to XBT Main Menu."

    # Reading answer about formatting:

    read format

    # if chosen, deleting data on drive and creating new formatted partition:

    if test "$format" == "YES"; then

        # Format the chosen USB drive:

	    echo "Formatting ${chosen_disk}. Please wait..."

        # Un-mounting the drive:

        sudo umount ${chosen_disk}1

        # Write 2 GBs of zeros to clear old partition tables:

	    sudo dd if=/dev/zero of=${chosen_disk} bs=1024k count=2048

	    # Creating new label and partition:

	    sudo parted --script ${chosen_disk} mklabel msdos mkpart primary ext4 1MiB 100%

	    # Creating new ext3 file sysem:

	    sudo mkfs.ext4 -F ${chosen_disk}1
	    echo "${chosen_disk} has been formatted! Adding lebel..."

        # Labeling the drive "XBT_Drive":

        sudo e2label ${chosen_disk}1 "XBT_Drive"
        sync

        # Returning to Main Menu:

        # Clear any accidental input during restore:

        read -t 1 -n 10000 discard

        clear
        echo $'\n'$"XBT Drive Setup complete!"
        echo $'\n'$"You should now remove the USB dive and plug it back in to"
        echo "make sure that it is property recognized by the system."
        echo "You can then run your first XBT Backup."
        greeting

    else

        # Abort format and return to Main Menu:

	    echo "XBT Drive Setup canceled. ${chosen_disk} not formatted."; sleep 3
        clear
        greeting

    fi

else

    # Abort XBT Drive Setup and return to Main Menu:

    clear
    greeting

fi

greeting

}

greeting() {

# XBT Main Menu.

	cat << _EOF_

XBT -- External Backup Tool (Version 2.0)

Main Menu: What would you like to do?

Press the number of your choice:

    1 - Backup.
    2 - Restore.
    3 - Setup XBT Drive.
    4 - Get some help.
    5 - View backup log. ('q' exits.}
    6 - Refresh USB Status.
    0 - Exit XBT.
_EOF_

# COnfirming that XBT_Drive USB is ready:

if [ ! -d /media/$user/XBT_Drive ]; then

    # Alert user that XBT Drive is not found:

    echo $'\n'$"USB Status: NO XBT DRIVE FOUND! Please make sure XBT_Drive USB is connected."
    if [[ $(lsblk -S -o  TRAN | grep 'usb') = *usb* ]]; then

        # Alert user that drives are connected but no XBT Drive:

        echo "            USB drive(s) connected. Plug in XBT Drive or setup a new one now."

    fi

else

    # Alert user that XBT Drive is ready for action:

    echo $'\n'$"USB Status: XBT Drive is ready!"

fi


# Hide the cursor.

tput civis

# Wait for user to make a choice and run chosen fucntions:

read -n 1 -s choice;
	case $choice in
			1) backup;;
			2) restore;;
			3) setup_drive;;
			4) help;;
            5) log;;
            6) clear;echo $'\n'$"Refreshing USB Status...";sleep 2;clear;greeting;;
            0) clear;echo $'\n'$"Exiting XBT... Goodbye!";sleep 2;exit;;
            *) echo "Not a valid choice: Please try again.";sleep 2;clear;greeting;;
	esac

}

help() {

    # Print help information using less utility:

	clear
    less << _EOF_

 XBT -- External Backup Tool -- Help
 (v. 2.0)

 Press "q" to exit this Help page and return to Main Menu.

 Commands:

 xbt = Starts XBT program with menu options.
 xbt --backup = Fully backs up host's /etc and /home directories to XBT_Drive.
 xbt --restore = Fully restores host machine's /home directory from XBT_Drive.
 xbt --help = Prints this help information.
 xbt --log = Prints log from XBT drive in interactive viewer. ("q" to exit.)

 Description:

 XBT is a program that makes keeping all of your user data safely backed up on
 a dedicated External USB drive easy.

 XBT will update files that have changed, remove files that have been
 deleted and add any new files that have been created since the last backup.
 The initial backup can take a lot of time if you have a lot of data stored
 in your system's /home directory. XBT creates a directory with the host name
 of the machine it's backing up from inside XBT-Backups. This allows users to
 share one XBT_Drive with multiple machines.

 The directory structure and all files are stored openly to allow users easy
 access if they only need to retrieve a few files or directories using a file
 manager. Data from /home can be restored with the built in "xbt restore"
 command if the user wants to roll back to the exact state of /home when the
 last backup was taken.

 A simple log file is added to the XBT_Drive that shows when each new
 backup is taken and any errors that might occur. This file is appended
 every time XBT is run. The log file is placed in XBT-Backups. You can view the
 last several backups by using the XBT Log viewer. Press "q" to exit when
 you're done.

 Requirements:

 XBT is designed to work with Ubuntu and Linux Mint but it should run
 on many other Linux distributions. You need to prepare an XBT Drive.
 This can be any USB storage device. The dedicated USB drive must be
 formatted to a Linux native file system such as Ext4 to ensure that file
 permissions will be stored unchanged. The USB drive needs to have enough
 free capacity to store all data in /home on all of the machines you want to
 use the drive for. The drive MUST be labeled as "XBT_Drive" for the script
 to run. If XBT_Drive is not detected, the script exits with an error.

 XBT Drive Setup allows you to choose a drive to designate as the XBT Drive. The
 selected drive will be "blanked," formatted with ext4 and labeled 'XBT_Drive."
 This option is available in the Main Menu.

 Feedback:

 Feel free to contact EzeeLinux with comments and suggestions for XBT and
 future projects.

 www.ezeelinux.com

 Enjoy using XBT!

 - Joe Collins

   December, 2017

 Disclaimer:

 THIS SOFTWARE IS PROVIDED BY EZEELINUX “AS IS” AND ANY EXPRESS OR IMPLIED
 WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
 EVENT SHALL EZEELINUX BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.

_EOF_

   clear
   greeting

}

log() {

# XBT Log Viewer. Shows the log file with less.

# Check for valid media and log file:

if [ ! -f /media/$user/XBT_Drive/XBT_Backups/xbt-backup.log ]; then

    # Check for log file and return to Main Menu with error if not found:

    clear
    echo $'\n'$"XBT Log Viewer"
    echo "XBT Error: No log file found. Make sure XBT_Drive USB is connected."
    echo "Note: The log is generated during the first XBT Backup."
    greeting

fi

# Load log file into less:
# "less +G" opens file and scrolls to end."

less +G /media/$user/XBT_Drive/XBT_Backups/xbt-backup.log
clear
greeting

}

# Execution Section

# Checking for command line arguments:

if [ "$1" == "--help" ]; then
	help
fi

if [ "$1" == "--log" ]; then
	log
fi

if [ "$1" == "--backup" ]; then
	backup
fi

if [ "$1" == "--restore" ]; then
	restore
fi

if  [ -n "$1"  ]; then
    echo "XBT Error: Invalid argument. Exiting to Main Menu."
    sleep 3
    greeting
fi

# Greeting user and offering Main Menu:

clear
echo "Greetings and Salutations!"

greeting
